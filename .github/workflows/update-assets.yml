name: Update assets.json

permissions:
  contents: write

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Pillow
        run: pip install Pillow

      - name: Add diagonal watermark to photos
        run: |
          python - <<'EOF'
          from PIL import Image, ImageDraw, ImageFont
          import os, math

          photos_dir = "photos"
          watermark_text = "Â© IvyBeanCrochet"
          font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
          font_size_ratio = 0.08

          for filename in os.listdir(photos_dir):
              if not filename.lower().endswith((".png", ".jpg", ".jpeg")):
                  continue
              path = os.path.join(photos_dir, filename)
              img = Image.open(path).convert("RGBA")
              width, height = img.size
              overlay = Image.new("RGBA", img.size, (255,255,255,0))
              draw = ImageDraw.Draw(overlay)
              font_size = int(width * font_size_ratio)
              font = ImageFont.truetype(font_path, font_size)

              # Get text size using textbbox
              bbox = draw.textbbox((0,0), watermark_text, font=font)
              text_width = bbox[2] - bbox[0]
              text_height = bbox[3] - bbox[1]

              angle = math.degrees(math.atan2(height, width))
              cx, cy = width // 2, height // 2
              txt_img = Image.new("RGBA", (text_width, text_height), (255,255,255,0))
              txt_draw = ImageDraw.Draw(txt_img)
              txt_draw.text((0, 0), watermark_text, font=font, fill=(255,255,255,64))

              # Rotate the text image with expand to avoid cutting off text
              rotated_txt_img = txt_img.rotate(angle, expand=1)

              # Create a new transparent layer same size as original image
              txt_layer = Image.new("RGBA", img.size, (255,255,255,0))
              # Calculate position to center rotated text on the image
              x = (width - rotated_txt_img.width) // 2
              y = (height - rotated_txt_img.height) // 2
              # Paste rotated text on txt_layer with mask for transparency
              txt_layer.paste(rotated_txt_img, (x, y), rotated_txt_img)

              # Composite original image with the text layer
              final_img = Image.alpha_composite(img, txt_layer)
              final_img.convert("RGB").save(path)
          EOF
          
      - name: Generate assets.json
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const patternsDir = 'patterns';
          const photosDir = 'photos';
          const allowedFileTypes = ['.png', '.jpg', '.jpeg'];
      
          const patternFiles = fs.existsSync(patternsDir)
            ? fs.readdirSync(patternsDir)
                .filter(f => allowedFileTypes.some(ext => f.toLowerCase().endsWith(ext)))
                .map(f => path.posix.join('patterns', f))
            : [];
      
          const photoFiles = fs.existsSync(photosDir)
            ? fs.readdirSync(photosDir)
                .filter(f => allowedFileTypes.some(ext => f.toLowerCase().endsWith(ext)))
                .map(f => path.posix.join('photos', f))
            : [];
      
          const assets = {
            patterns: patternFiles,
            photos: photoFiles,
          };
      
          fs.writeFileSync('assets.json', JSON.stringify(assets, null, 2));
          "


      - name: Commit and push changes
        run: |
          git config user.name 'uwkx'
          git config user.email 'uk8002@proton.me'
          git add assets.json photos
          git diff --cached --quiet || git commit -m 'Update assets.json and watermark photos'
          git push origin HEAD:main
